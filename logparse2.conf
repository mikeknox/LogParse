# Describe config file for log parse / summary engine
# Input fields from syslog:
# Date, time, server, application, facility, ID, message
#
# Config line
# /server regex/, /app regex/, /facility regex/, /msg regex/, $ACTIONS
# Summaries are required at various levels, from total instances to total sizes to server summaries.
# ACTIONS:
# COUNT - Just list the total number of matches
# SUM[x] - Report the sum of field x of all matches
# SUM[x], /regex/ - Apply regex to msg field of matches and report the sum of field x from that regex 
# SUM[x], /regex/, {y,z} - Apply regex to msg field of matches and report the sum of field x from that regex for fields y & z
# AVG[x], /regex/, {y,z} - Apply regex to msg field of matches and report the average of field x from that regex for fields y & z
# COUNT[x], /regex/, {y,z} - Apply regex to msg field of matches and report the count of field x from that regex for matching fields y & z
#
# Report
# Line {x} - count
#       {a} - average
#       {s} - sum
#       {1} {2} etc - field #'s from the match line in the cmd segement
#
# Each entry can test or regex, if text interpret as regex /^string$/

########################################
RULE FWDENY {
	#HOST someciscoASA
	#MSG /Deny (.*) src/
	MSG !/Deny (.*) src (.*):(.*)/8140 dst (.*):(.*)/(.*) by access-group "(.*)"/
	CMD {
        #  Deny udp src DevTest:a.b.c.d/657 dst Production:192.168.0.1/657 by access-group "DevTest_access_in"
		REGEX /Deny (.*) src (.*):(.*)/(.*) dst (.*):(.*)/(.*) by access-group "(.*)"/

		#MATCH {1,3,4,6,7}
		MATCH {1,6,3,4}
		COUNT
	}
	REPORT {
		TITLE "Packets rejected"
		#LINE "{x}: {4}/{3} from {2}/{1} - {5}"
		LINE "{x}: {2} from {3}/{4} {1}"
	}
}
RULE FWPUPDENY {
    #HOST someciscoASA
    MSG /Deny (.*) src (.*):(.*)/8140 dst (.*):(.*)/(.*) by access-group "(.*)"/
    #MSG /Deny (.*) src/
    CMD {
        #  Deny udp src DevTest:a.b.c.d/657 dst Production:192.168.0.1/657 by access-group "DevTest_access_in"
        REGEX /Deny (.*) src (.*):(.*)/(.*) dst (.*):(.*)/(.*) by access-group "(.*)"/

        #MATCH {1,3,4,6,7}
        MATCH {1,6,3,4}
        COUNT
        APPEND FWDENY
    }
}

RULE FWICMPINV {
    MSG /Invalid destination for ICMP error message/
#icmp src DevTest:a.b.c.d dst Production:somehost (type 3, code 3) on DevTest interface.  Original IP payload: udp src somehost/53 dst a.b.c.d/48755/
    CMD {
        REGEX /Invalid destination for ICMP error message: icmp src (.*):(.*) dst (.*):(.*) \(type (.*), code (.*)\) on (.*) interface\.  Original IP payload: (.*) src (.*) dst (.*)/
        MATCH {2, 4, 5, 6, 7}
        COUNT
    }
    REPORT {
        TITLE "Invalid ICMP errors"
        LINE "{x} ICMP errors of type {3}, code {4} from {1} to {2}"
    }
}

RULE SVCSTARTUP {
    MSG /startup/
    CMD {
        REGEX /\s+(.*) startup (\w+)/
        MATCH {svr,1,2}
        COUNT
    }
    REPORT {
        TITLE "Service starts"
        LINE "{2} startup {3} {x} times on {1}"
    }
}

RULE SVCRESTARTED {
    MSG /restart/
    CMD {
        REGEX /\s+(.*) restart./
        MATCH {svr,1}
        COUNT
    }
    REPORT {
        TITLE "Service restart"
        LINE "{x} restarts of {2} on {1}"
    }
}

RULE IPTABLES-STARTUP {
    APP /iptables/
    MSG /succeeded$/
    CMD {
        REGEX /(\w+)$/
        MATCH {svr,app,1}
        COUNT
        APPEND SVCSTARTUP
    }
}

RULE SVC-SHUTDOWN {
    MSG /shutdown/
    CMD {
        REGEX /\s+(.*) shutdown (\w+)/
        MATCH {svr,1,2}
        COUNT
    }
    REPORT {
        TITLE "Service shutdowns"
        LINE "{2} startup {3} {x} times on {1}"
    }
}

RULE POSTFIX-SHUTDOWN {
    APP postfix\/postfix-script
    MSG /stopping the Postfix mail system/
    CMD {
        REGEX /stopping the (.*) mail system/
        MATCH {svr,1}
        COUNT
        APPEND SVC-SHUTDOWN
    }
}


############################
RULE PUP-IGNORE-SUCCESS {
 APP puppetd
 MSG /executed successfully/
 CMD IGNORE
}

RULE PUP-IGNORE-ALL-BUT-FAILURES {
    APP puppetd
    # match any puppet line starting with (//(.*)/)
    # then ignore any that don't contained the word failed
    MSG /^\(\/\/\)(.*)\)(.*)/
    CMD {
        REGEX !/^\(\/\/\)(.*)\)(.*)failed/
        IGNORE
    }
}
RULE PUP-IGNORE-ALL-BUT-RETNON0{
    APP puppetd
    #MSG !/returned (.*) instead of 0/
    MSG /returned (.*) instead of 0/
    CMD IGNORE
}
RULE PUP-IGNORE-ALL-SKIP-CONFIG-RUN {
    APP puppetd
    #MSG !/skipping configuration run/
    MSG /skipping configuration run/
    CMD IGNORE
}
RULE PUP-IGNORE-ALL-BUT-COULDNOTCREATE {
    APP puppetd
    #MSG !/Could not creat/
    MSG /Could not creat/
    CMD IGNORE
}
RULE PUP-IGNORE-ALL-BUT-PARENT {
    APP puppetd
    #MSG !/is already the parent of component/
    MSG /is already the parent of component/
    CMD IGNORE
}
RULE PUP-IGNORE-ALL-BUT-COULDNOTAPPLY {
    APP puppetd
    #MSG !/Could not apply complete /
    MSG /Could not apply complete /
    CMD IGNORE
}

RULE {
    APP puppetd
    MSG Starting configuration run
    CMD IGNORE
}

RULE PUP-CONFIG-RUN {
# Report average time to run puppet cofiguration per server
# Sep 17 00:05:25 ahost puppetd[12970]: Finished configuration run in 56.05 seconds
    APP puppetd
    MSG  Finished configuration run in
    CMD {
        REGEX /Finished configuration run in (.*) seconds/
        MATCH {svr}
        AVG {1}
    }
    REPORT {
        TITLE "Puppet Configuration run - average time"
        LINE "{a}s (avg) - {1} - {x} instances"
    }
}

##########################
RULE EXPORTFS {
    APP exportfs
    CMD {
        REGEX /(.*) has non-inet addr/
        MATCH {svr,1}
        COUNT
    }
    REPORT {
        TITLE "Attempts to NFS export to hosts without a DNS entry"
        LINE "{x} attempts to export to {2} on {1}"
    }
}

RULE {
 APP syslog-ng
 MSG /syslog-ng starting up; version/
 CMD IGNORE
}

RULE XINETDIGNORE{
 APP xinetd
 CMD IGNORE
}
####################################
RULE NAGIOSCURSTATE {
    APP nagios
    MSG ^CURRENT SERVICE STATE:
    CMD IGNORE
}

RULE NAGIOSCURHOSTSTATE {
    APP nagios
    MSG CURRENT HOST STATE: (.*);UP;HARD;1;PING OK
    CMD IGNORE
}
####################################

RULE POSTFIX-NIS-domain {
    APP postfix\/smtpd
    MSG warning: dict_nis_init: NIS domain name not set - NIS lookups disabled
    CMD IGNORE
}

RULE POSTFIXQMGRREM {
    APP postfix/qmgr
    MSG /(.*): removed/
    CMD IGNORE
}

RULE POSTFIXCLEANUP {
    APP postfix/cleanup
    MSG /(.*): message-id=/
    CMD IGNORE
}

RULE POSTFIXSMTPD {
    APP postfix/smtpd
    MSG /(.*): client=/
    CMD IGNORE
}

RULE POSTFIXSMTPD2 {
    APP postfix/smtpd
    MSG /^connect from/
    CMD IGNORE
}

RULE POSTFIXSCACHE {
    APP postfix/scache
    CMD IGNORE
}

RULE POSTFIXMSGFROM {
    APP postfix
    MSG /from=\<(.*)\>/
    CMD {
        REGEX /from=\<(.*)\>/
        MATCH {svr,1}
        COUNT
    }
    REPORT {
        TITLE "Postfix senders:"
        LINE "{2} sent {x} emails from {1}"
}

RULE POSTFIXMSGTO {
    APP postfix
    MSG /to=\<(.*)\>/
    CMD {
        REGEX /to=\<(.*)\>/
        MATCH {1}
        COUNT
    }
    REPORT {
        TITLE "Postfix receivers:"
        LINE "{x} emails sent to {1}"
    }
}

RULE POSTFIX-SMTPD {
    APP postfix\/smtp
    MSG /^disconnect from/
    CMD IGNORE
}

####################################
RULE SENDMAIL-NOQUEUE {
    APP sendmail
    MSG /NOQUEUE:/
    CMD {
        REGEX /NOQUEUE: (.*) \[(.*)\] did not issue MAIL/EXPN/VRFY/ETRN during connection to MTA/
        MATCH {svr,1}
        COUNT
    }
    REPORT {
        TITLE "Sendmail didnot receive  MAIL/EXPN/VRFY/ETRN during connection to MTA"
        LINE "{x} connections from {1} to {2}"
    }
}

####################################
RULE CRONCOUNT {
    APP CROND
    CMD {
        REGEX /\((.*)\) CMD \((.*)\)/
        MATCH {svr,1,2}
        COUNT
    }
    REPORT {
        TITLE "cronjob count:"
        LINE "{x} executions by {2} on {1} of "{3}""
    }
}
RULE CRONCOUNTRHEL3 {
    APP crontab
    CMD {
        REGEX /\((.*)\) CMD \((.*)\)/
        MATCH {svr,1,2}
        COUNT
        APPEND CRONCOUNT
    }
}
RULE CRONCOUNTRHEL4 {
    APP crond
    CMD {
        REGEX /\((.*)\) CMD \((.*)\)/
        MATCH {svr,1,2}
        COUNT
        APPEND CRONCOUNT
    }
}

RULE {
    APP crontab
    MSG /\(.*\) LIST \(.*\)/
    CMD IGNORE
}

RULE {
 APP crond
 MSG //usr/bin/build-firewall.sh/
 CMD IGNORE
}

RULE CRONSESOPENED {
    APP crond
    MSG /session opened for user/
    CMD IGNORE
}
RULE CRONSESCLOSED {
    APP crond
    MSG /session closed for user/
    CMD IGNORE
}
####################################
RULE TELNET-ttloop {
#Sep 10 00:02:18 ahost telnetd[13359]: [ID 485252 daemon.info] ttloop:  peer died: Invalid argument
    APP telnetd
    MSG /ttloop:  peer died: Invalid argument/
    CMD IGNORE
}

####################################
RULE NTP-sync {
# Using the synchronized to syslogs, report which servers are sync'd to where and at which stratum's
#Sep 10 00:18:21 ahost ntpd[3819]: synchronized to a.b.c.d, stratum 3
    APP ntp
    MSG /synchronized to/
    CMD {
        REGEX /synchronized to (.*), stratum (.*)/
        MATCH {svr,1,2}
        COUNT
    }
    REPORT {
        TITLE "NTP sync'd"
        LINE "{x} syncs of {1} to {2} at stratum {3}"
    }
}

RULE NTP-time-reset {
# Report avg reset time for each client
#Sep 11 00:00:26 ahost ntpd[3819]: time reset +0.183464 s
    APP ntp
    MSG time reset
    CMD {
        REGEX /time reset (.*) s/
        MATCH {svr}
        AVG {1}
    }
    REPORT {
        TITLE "NTP average time reset"
        LINE "{a} s for {1} {x} instances"
    }
}

####################################
RULE SSHSESSOPENED {
    APP sshd
    MSG /session opened for user/
    CMD IGNORE
}
RULE SSHSESSIONCLOSED {
    APP sshd
    MSG /session closed for user/
    CMD IGNORE
}
RULE SSHDCONNCLOSED {
    APP sshd
    MSG Connection closed by ::ffff:
    CMD IGNORE
}

RULE SSHDCONNCLOSED2 {
    APP sshd
    MSG Connection closed by a.b.c.d
    CMD IGNORE
}

RULE SSHPASSFAILED {
    APP sshd
    CMD {
        REGEX /Failed password for (.*) from ::ffff:(.*) port/
        MATCH {1,2,svr}
        COUNT
    }
    REPORT {
        TITLE "SSH failed connections via password"
        LINE "{x} failed connections by {1} from {2} to {3}"
    }
}

RULE SSHKEYAUTH {
    APP sshd
    CMD {
        REGEX /Accepted publickey for (.*) from ::ffff:(.*) port/
        MATCH {1,2,svr}
        COUNT
    }
    REPORT {
        TITLE "SSH connections via key"
        LINE "{x} connections by {1} from {2} to {3}"
    }
}
RULE SSHPASSLOGGIN {
    APP sshd
    CMD {
        REGEX /Accepted password for (.*) from ::ffff:(.*) port/
        MATCH {1,2,svr}
        COUNT
    }
    REPORT {
        TITLE "SSH connections via password"
        LINE "{x} connections by {1} from {2} to {3}"
    }
}

RULE SSHCLOSED {
    APP sshd
    MSG /session closed for user/
    CMD {
        REGEX /session closed for user (.*)/
        MATCH {1, svr}
        COUNT
    }
    REPORT {
        TITLE "SSH closed connections"
        LINE "{x} connections closed on {2} for {1}"
    }
}

RULE SSHDISABLEV1 {
    APP sshd
    MSG /Disabling protocol version 1\. Could not load host key/
    CMD {
        #REGEX /Disabling protocol version 1\. Could not load host key/
        MATCH {svr}
        COUNT
    }
    REPORT {
        TITLE "SSH Disabling protocol v1"
        LINE "{x} SSH v1 disabled on {1}"
    }
}

RULE SSHDSIG15 {
    APP sshd
    MSG /Received signal 15; terminating/
    CMD IGNORE
}

RULE SSHADDINUSE {
    APP sshd
    MSG /error: Bind to port 22 on :: failed: Address already in use/
    CMD {
        MATCH {svr}
        COUNT
    }

    REPORT {
        TITLE "SSH Address already in use:"
        LINE "{x} reports of port 22 already in use on {1}"
    }
}

RULE SSHADDINUSE2 {
    APP sshd
    MSG /error: Bind to port 22 on 0\.0\.0\.0 failed: Address already in use\./
    CMD {
        MATCH {svr}
        COUNT
        APPEND SSHADDINUSE
    }
}

RULE SSHLISTENING {
    APP sshd
    MSG /Server listening on 0\.0\.0\.0 port 22/
    CMD {
        MATCH {svr}
        COUNT
    }

    REPORT {
        TITLE "SSH Listening on port 22:"
        LINE "{x} reports of {1} listening on port 22"
    }
}

RULE SSHBINDADD {
    APP sshd
    MSG fatal: Cannot bind any address
    CMD IGNORE
}

####################################
RULE WINLOGON {
    APP Security
    MSG /Category:Logon\/Logoff/
    CMD {
        REGEX /Category:Logon\/Logoff; User:(.*)\\(.*); User Logoff:User Name:(.*)Domain:(.*)Logon ID:\((.*),(.*)\)Logon Type:(.*)/
        # svr, user, domain, logon type
        MATCH {svr,2,1}
        COUNT
    }
    REPORT {
        TITLE "Windows Logon's"
        LINE "{x} logons to {1} by {3}/{2}"
    }
}

RULE WINLOGON2 {
    APP Security
    MSG /Category:Logon\/Logoff/
    CMD {
        MATCH {svr,2,1}
        COUNT
        APPEND WINLOGON
    }
}

RULE WINLOGON3 {
    APP Security
    MSG /Category:Logon\/Logoff/
    CMD {
        REGEX /User:(.*)\\(.*); Logon attempt using explicit credentials:Logged on user:User Name:(.*)Domain:(.*)Logon ID:\((.*),(.*)\)Logon GUID:(.*)User whose credentials were used:Target User Name:(.*)Target Domain:(.*)Target Logon GUID: {(.*)}Target Server Name:(.*)Target Server Info:(.*)Caller Process ID:(.*)Source Network Address:(.*)Source Port:(.*)/
        MATCH {svr,2,1}
        COUNT
        APPEND WINLOGON
    }
}

RULE WINLOGONPRIV {
    APP Security
    MSG /Category:Privilege Use/
    CMD {
        REGEX /Category:Privilege Use; User:(.*)\\(.*); Special privileges assigned to new logon:User Name:(.*)Domain:(.*)Logon ID:\((.*),(.*)\)Privileges:(.*)/
        MATCH {svr,1,2,7}
        COUNT
    }
    REPORT {
        TITLE "WINLOGON Priveledges"
        LINE "{x} logons by {2}\{3} to {1} with priveledges {4}"
    }
}

####################################
RULE SYSLOGNGSUMM {
    APP syslog-ng
    MSG Log statistics;
    CMD IGNORE
}
####################################
RULE RPCRSVPORT
    APP kernel
    MSG can't bind to reserved port
    CMD IGNORE
}
RULE RPCSVCCONN
    APP kernel
    MSG RPC: error 5 connecting to server (.*)
    CMD {
        REGEX RPC: error 5 connecting to server (.*)
        MATCH {svr,1}
        COUNT
    }
    REPORT {
        TITLE "RPC CONN error"
        LINE "{x} errors connecting to {2} from {1}"
    }
}

####################################
RULE KRNL-CDROM-IGNORE {
    APP kernel
    MSG cdrom: open failed
    CMD IGNORE
}
####################################
